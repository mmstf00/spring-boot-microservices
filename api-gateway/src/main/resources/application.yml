spring:
  application:
    name: api-gateway
  banner:
    location: classpath:banner.txt
  cloud:
    gateway:
      routes[0]:
        id: product-service
        uri: lb://product-service # API Gateway also acts as a LB
        predicates[0]: Path=/api/product
      routes[1]:
        id: order-service
        uri: lb://order-service
        predicates[0]: Path=/api/order
      routes[2]:
        id: discovery-server
        uri: http://eureka:password@${app.eureka-server}:8761
        filters[0]: SetPath=/
        predicates[0]: Path=/eureka/web
      routes[3]:
        id: discovery-server-static
        uri: http://eureka:password@${app.eureka-server}:8761
        predicates[0]: Path=/eureka/**
  security:
    oauth2:
      resourceserver:
        jwt:
          # Spring Boot will read the openid configuration and will fetch
          # all the endpoints to make an authorization
          issuer-uri: http://localhost:8080/realms/spring-boot-microservices-realm

server:
  port: 8181

# Eureka client config
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:password@localhost:8761/eureka

app:
  eureka-server: localhost

# Increase the logging level
logging:
  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

# Actuator Properties
management:
  endpoints:
    web:
      exposure:
        include: prometheus
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 # To trace 100% of the requests in the system
